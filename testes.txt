int main()
{
	int N = 9;
	int A = 15;
	int ijpeso[] = { 
        9,2,5, 
        9,8,1, 
        8,2,1, 
        8,1,4, 
        8,7,2, 
        7,6,1, 
        1,2,1, 
        1,6,1, 
        1,4,2, 
        6,5,2, 
        5,4,1, 
        2,4,2,
        2,3,4,
        3,5,1, 
        3,4,1 };

    int aberto[] = { 1, 1, 1, 1, 1, 1, 1, 1, 1};
	int inicio;
	int fim;
	int chave;

    // Vetor com testes no formato de quadruplas: [ inicio, fim, chave, vetor fechado]. Exemplo: 1, 9, 3, 2 -> inicio 1; fim 9; chave 3; vetor fechado 2.
    int num_testes = 10;
    int testes[] = {
    1, 9, 3, 2,     // Teste 1
    1, 9, 7, 28,    // Teste 2
    1, 9, 3, 28,    // Teste 3
    1, 9, 3, 284,   // Teste 4
    9, 4, 7, 0,     // Teste 5
    9, 4, 7, 2,     // Teste 6
    9, 4, 7, 12,    // Teste 7
    9, 4, 7, 8,     // Teste 8
    8, 6, 3, 256,   // Teste 9
    8, 6, 3, 156    // Teste 10
    };

	NO *teste;
    int i, j, fechados;

    for(i = 0; i<num_testes; i++){
        for(j = 0; j<N; j++){
            aberto[j] = 1;
        }

        inicio = testes[i * 4];
        fim = testes[(i * 4) + 1];
        chave = testes[(i * 4) + 2];
        fechados = testes[(i * 4) + 3];

        while(fechados > 0)
        {
            aberto[(fechados % 10) - 1] = 0;
            fechados = fechados / 10;
        }
        
        teste = caminho( N, A, ijpeso, aberto, inicio, fim, chave);
        int breakpoint = 0; // VariÃ¡vel para cololocar breakpoint e realizar a analise do caminho na lista ligada do NO teste
    }

	return 0;
}
